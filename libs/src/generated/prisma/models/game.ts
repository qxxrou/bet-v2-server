
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `game` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model game
 * 
 */
export type gameModel = runtime.Types.Result.DefaultSelection<Prisma.$gamePayload>

export type AggregateGame = {
  _count: GameCountAggregateOutputType | null
  _avg: GameAvgAggregateOutputType | null
  _sum: GameSumAggregateOutputType | null
  _min: GameMinAggregateOutputType | null
  _max: GameMaxAggregateOutputType | null
}

export type GameAvgAggregateOutputType = {
  product_id: number | null
  product_code: number | null
  status: number | null
  allow_free_round: number | null
}

export type GameSumAggregateOutputType = {
  product_id: number | null
  product_code: number | null
  status: number | null
  allow_free_round: number | null
}

export type GameMinAggregateOutputType = {
  game_code: string | null
  game_name: string | null
  game_type: string | null
  product_id: number | null
  product_code: number | null
  status: number | null
  support_currency: string | null
  allow_free_round: number | null
  lang_name: string | null
  lang_icon: string | null
}

export type GameMaxAggregateOutputType = {
  game_code: string | null
  game_name: string | null
  game_type: string | null
  product_id: number | null
  product_code: number | null
  status: number | null
  support_currency: string | null
  allow_free_round: number | null
  lang_name: string | null
  lang_icon: string | null
}

export type GameCountAggregateOutputType = {
  game_code: number
  game_name: number
  game_type: number
  product_id: number
  product_code: number
  status: number
  support_currency: number
  allow_free_round: number
  lang_name: number
  lang_icon: number
  _all: number
}


export type GameAvgAggregateInputType = {
  product_id?: true
  product_code?: true
  status?: true
  allow_free_round?: true
}

export type GameSumAggregateInputType = {
  product_id?: true
  product_code?: true
  status?: true
  allow_free_round?: true
}

export type GameMinAggregateInputType = {
  game_code?: true
  game_name?: true
  game_type?: true
  product_id?: true
  product_code?: true
  status?: true
  support_currency?: true
  allow_free_round?: true
  lang_name?: true
  lang_icon?: true
}

export type GameMaxAggregateInputType = {
  game_code?: true
  game_name?: true
  game_type?: true
  product_id?: true
  product_code?: true
  status?: true
  support_currency?: true
  allow_free_round?: true
  lang_name?: true
  lang_icon?: true
}

export type GameCountAggregateInputType = {
  game_code?: true
  game_name?: true
  game_type?: true
  product_id?: true
  product_code?: true
  status?: true
  support_currency?: true
  allow_free_round?: true
  lang_name?: true
  lang_icon?: true
  _all?: true
}

export type GameAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which game to aggregate.
   */
  where?: Prisma.gameWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of games to fetch.
   */
  orderBy?: Prisma.gameOrderByWithRelationInput | Prisma.gameOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.gameWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` games from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` games.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned games
  **/
  _count?: true | GameCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: GameAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: GameSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GameMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GameMaxAggregateInputType
}

export type GetGameAggregateType<T extends GameAggregateArgs> = {
      [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGame[P]>
    : Prisma.GetScalarType<T[P], AggregateGame[P]>
}




export type gameGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.gameWhereInput
  orderBy?: Prisma.gameOrderByWithAggregationInput | Prisma.gameOrderByWithAggregationInput[]
  by: Prisma.GameScalarFieldEnum[] | Prisma.GameScalarFieldEnum
  having?: Prisma.gameScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GameCountAggregateInputType | true
  _avg?: GameAvgAggregateInputType
  _sum?: GameSumAggregateInputType
  _min?: GameMinAggregateInputType
  _max?: GameMaxAggregateInputType
}

export type GameGroupByOutputType = {
  game_code: string
  game_name: string
  game_type: string
  product_id: number
  product_code: number
  status: number
  support_currency: string
  allow_free_round: number
  lang_name: string
  lang_icon: string
  _count: GameCountAggregateOutputType | null
  _avg: GameAvgAggregateOutputType | null
  _sum: GameSumAggregateOutputType | null
  _min: GameMinAggregateOutputType | null
  _max: GameMaxAggregateOutputType | null
}

type GetGameGroupByPayload<T extends gameGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GameGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GameGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GameGroupByOutputType[P]>
      }
    >
  >



export type gameWhereInput = {
  AND?: Prisma.gameWhereInput | Prisma.gameWhereInput[]
  OR?: Prisma.gameWhereInput[]
  NOT?: Prisma.gameWhereInput | Prisma.gameWhereInput[]
  game_code?: Prisma.StringFilter<"game"> | string
  game_name?: Prisma.StringFilter<"game"> | string
  game_type?: Prisma.StringFilter<"game"> | string
  product_id?: Prisma.IntFilter<"game"> | number
  product_code?: Prisma.IntFilter<"game"> | number
  status?: Prisma.IntFilter<"game"> | number
  support_currency?: Prisma.StringFilter<"game"> | string
  allow_free_round?: Prisma.IntFilter<"game"> | number
  lang_name?: Prisma.StringFilter<"game"> | string
  lang_icon?: Prisma.StringFilter<"game"> | string
  type?: Prisma.XOR<Prisma.Game_typeScalarRelationFilter, Prisma.game_typeWhereInput>
  product?: Prisma.XOR<Prisma.Game_productScalarRelationFilter, Prisma.game_productWhereInput>
}

export type gameOrderByWithRelationInput = {
  game_code?: Prisma.SortOrder
  game_name?: Prisma.SortOrder
  game_type?: Prisma.SortOrder
  product_id?: Prisma.SortOrder
  product_code?: Prisma.SortOrder
  status?: Prisma.SortOrder
  support_currency?: Prisma.SortOrder
  allow_free_round?: Prisma.SortOrder
  lang_name?: Prisma.SortOrder
  lang_icon?: Prisma.SortOrder
  type?: Prisma.game_typeOrderByWithRelationInput
  product?: Prisma.game_productOrderByWithRelationInput
  _relevance?: Prisma.gameOrderByRelevanceInput
}

export type gameWhereUniqueInput = Prisma.AtLeast<{
  game_code?: string
  AND?: Prisma.gameWhereInput | Prisma.gameWhereInput[]
  OR?: Prisma.gameWhereInput[]
  NOT?: Prisma.gameWhereInput | Prisma.gameWhereInput[]
  game_name?: Prisma.StringFilter<"game"> | string
  game_type?: Prisma.StringFilter<"game"> | string
  product_id?: Prisma.IntFilter<"game"> | number
  product_code?: Prisma.IntFilter<"game"> | number
  status?: Prisma.IntFilter<"game"> | number
  support_currency?: Prisma.StringFilter<"game"> | string
  allow_free_round?: Prisma.IntFilter<"game"> | number
  lang_name?: Prisma.StringFilter<"game"> | string
  lang_icon?: Prisma.StringFilter<"game"> | string
  type?: Prisma.XOR<Prisma.Game_typeScalarRelationFilter, Prisma.game_typeWhereInput>
  product?: Prisma.XOR<Prisma.Game_productScalarRelationFilter, Prisma.game_productWhereInput>
}, "game_code">

export type gameOrderByWithAggregationInput = {
  game_code?: Prisma.SortOrder
  game_name?: Prisma.SortOrder
  game_type?: Prisma.SortOrder
  product_id?: Prisma.SortOrder
  product_code?: Prisma.SortOrder
  status?: Prisma.SortOrder
  support_currency?: Prisma.SortOrder
  allow_free_round?: Prisma.SortOrder
  lang_name?: Prisma.SortOrder
  lang_icon?: Prisma.SortOrder
  _count?: Prisma.gameCountOrderByAggregateInput
  _avg?: Prisma.gameAvgOrderByAggregateInput
  _max?: Prisma.gameMaxOrderByAggregateInput
  _min?: Prisma.gameMinOrderByAggregateInput
  _sum?: Prisma.gameSumOrderByAggregateInput
}

export type gameScalarWhereWithAggregatesInput = {
  AND?: Prisma.gameScalarWhereWithAggregatesInput | Prisma.gameScalarWhereWithAggregatesInput[]
  OR?: Prisma.gameScalarWhereWithAggregatesInput[]
  NOT?: Prisma.gameScalarWhereWithAggregatesInput | Prisma.gameScalarWhereWithAggregatesInput[]
  game_code?: Prisma.StringWithAggregatesFilter<"game"> | string
  game_name?: Prisma.StringWithAggregatesFilter<"game"> | string
  game_type?: Prisma.StringWithAggregatesFilter<"game"> | string
  product_id?: Prisma.IntWithAggregatesFilter<"game"> | number
  product_code?: Prisma.IntWithAggregatesFilter<"game"> | number
  status?: Prisma.IntWithAggregatesFilter<"game"> | number
  support_currency?: Prisma.StringWithAggregatesFilter<"game"> | string
  allow_free_round?: Prisma.IntWithAggregatesFilter<"game"> | number
  lang_name?: Prisma.StringWithAggregatesFilter<"game"> | string
  lang_icon?: Prisma.StringWithAggregatesFilter<"game"> | string
}

export type gameCreateInput = {
  game_code: string
  game_name: string
  product_id: number
  status: number
  support_currency: string
  allow_free_round: number
  lang_name: string
  lang_icon: string
  type: Prisma.game_typeCreateNestedOneWithoutGamesInput
  product: Prisma.game_productCreateNestedOneWithoutGamesInput
}

export type gameUncheckedCreateInput = {
  game_code: string
  game_name: string
  game_type: string
  product_id: number
  product_code: number
  status: number
  support_currency: string
  allow_free_round: number
  lang_name: string
  lang_icon: string
}

export type gameUpdateInput = {
  game_code?: Prisma.StringFieldUpdateOperationsInput | string
  game_name?: Prisma.StringFieldUpdateOperationsInput | string
  product_id?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  support_currency?: Prisma.StringFieldUpdateOperationsInput | string
  allow_free_round?: Prisma.IntFieldUpdateOperationsInput | number
  lang_name?: Prisma.StringFieldUpdateOperationsInput | string
  lang_icon?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.game_typeUpdateOneRequiredWithoutGamesNestedInput
  product?: Prisma.game_productUpdateOneRequiredWithoutGamesNestedInput
}

export type gameUncheckedUpdateInput = {
  game_code?: Prisma.StringFieldUpdateOperationsInput | string
  game_name?: Prisma.StringFieldUpdateOperationsInput | string
  game_type?: Prisma.StringFieldUpdateOperationsInput | string
  product_id?: Prisma.IntFieldUpdateOperationsInput | number
  product_code?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  support_currency?: Prisma.StringFieldUpdateOperationsInput | string
  allow_free_round?: Prisma.IntFieldUpdateOperationsInput | number
  lang_name?: Prisma.StringFieldUpdateOperationsInput | string
  lang_icon?: Prisma.StringFieldUpdateOperationsInput | string
}

export type gameCreateManyInput = {
  game_code: string
  game_name: string
  game_type: string
  product_id: number
  product_code: number
  status: number
  support_currency: string
  allow_free_round: number
  lang_name: string
  lang_icon: string
}

export type gameUpdateManyMutationInput = {
  game_code?: Prisma.StringFieldUpdateOperationsInput | string
  game_name?: Prisma.StringFieldUpdateOperationsInput | string
  product_id?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  support_currency?: Prisma.StringFieldUpdateOperationsInput | string
  allow_free_round?: Prisma.IntFieldUpdateOperationsInput | number
  lang_name?: Prisma.StringFieldUpdateOperationsInput | string
  lang_icon?: Prisma.StringFieldUpdateOperationsInput | string
}

export type gameUncheckedUpdateManyInput = {
  game_code?: Prisma.StringFieldUpdateOperationsInput | string
  game_name?: Prisma.StringFieldUpdateOperationsInput | string
  game_type?: Prisma.StringFieldUpdateOperationsInput | string
  product_id?: Prisma.IntFieldUpdateOperationsInput | number
  product_code?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  support_currency?: Prisma.StringFieldUpdateOperationsInput | string
  allow_free_round?: Prisma.IntFieldUpdateOperationsInput | number
  lang_name?: Prisma.StringFieldUpdateOperationsInput | string
  lang_icon?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GameListRelationFilter = {
  every?: Prisma.gameWhereInput
  some?: Prisma.gameWhereInput
  none?: Prisma.gameWhereInput
}

export type gameOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type gameOrderByRelevanceInput = {
  fields: Prisma.gameOrderByRelevanceFieldEnum | Prisma.gameOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type gameCountOrderByAggregateInput = {
  game_code?: Prisma.SortOrder
  game_name?: Prisma.SortOrder
  game_type?: Prisma.SortOrder
  product_id?: Prisma.SortOrder
  product_code?: Prisma.SortOrder
  status?: Prisma.SortOrder
  support_currency?: Prisma.SortOrder
  allow_free_round?: Prisma.SortOrder
  lang_name?: Prisma.SortOrder
  lang_icon?: Prisma.SortOrder
}

export type gameAvgOrderByAggregateInput = {
  product_id?: Prisma.SortOrder
  product_code?: Prisma.SortOrder
  status?: Prisma.SortOrder
  allow_free_round?: Prisma.SortOrder
}

export type gameMaxOrderByAggregateInput = {
  game_code?: Prisma.SortOrder
  game_name?: Prisma.SortOrder
  game_type?: Prisma.SortOrder
  product_id?: Prisma.SortOrder
  product_code?: Prisma.SortOrder
  status?: Prisma.SortOrder
  support_currency?: Prisma.SortOrder
  allow_free_round?: Prisma.SortOrder
  lang_name?: Prisma.SortOrder
  lang_icon?: Prisma.SortOrder
}

export type gameMinOrderByAggregateInput = {
  game_code?: Prisma.SortOrder
  game_name?: Prisma.SortOrder
  game_type?: Prisma.SortOrder
  product_id?: Prisma.SortOrder
  product_code?: Prisma.SortOrder
  status?: Prisma.SortOrder
  support_currency?: Prisma.SortOrder
  allow_free_round?: Prisma.SortOrder
  lang_name?: Prisma.SortOrder
  lang_icon?: Prisma.SortOrder
}

export type gameSumOrderByAggregateInput = {
  product_id?: Prisma.SortOrder
  product_code?: Prisma.SortOrder
  status?: Prisma.SortOrder
  allow_free_round?: Prisma.SortOrder
}

export type gameCreateNestedManyWithoutTypeInput = {
  create?: Prisma.XOR<Prisma.gameCreateWithoutTypeInput, Prisma.gameUncheckedCreateWithoutTypeInput> | Prisma.gameCreateWithoutTypeInput[] | Prisma.gameUncheckedCreateWithoutTypeInput[]
  connectOrCreate?: Prisma.gameCreateOrConnectWithoutTypeInput | Prisma.gameCreateOrConnectWithoutTypeInput[]
  createMany?: Prisma.gameCreateManyTypeInputEnvelope
  connect?: Prisma.gameWhereUniqueInput | Prisma.gameWhereUniqueInput[]
}

export type gameUncheckedCreateNestedManyWithoutTypeInput = {
  create?: Prisma.XOR<Prisma.gameCreateWithoutTypeInput, Prisma.gameUncheckedCreateWithoutTypeInput> | Prisma.gameCreateWithoutTypeInput[] | Prisma.gameUncheckedCreateWithoutTypeInput[]
  connectOrCreate?: Prisma.gameCreateOrConnectWithoutTypeInput | Prisma.gameCreateOrConnectWithoutTypeInput[]
  createMany?: Prisma.gameCreateManyTypeInputEnvelope
  connect?: Prisma.gameWhereUniqueInput | Prisma.gameWhereUniqueInput[]
}

export type gameUpdateManyWithoutTypeNestedInput = {
  create?: Prisma.XOR<Prisma.gameCreateWithoutTypeInput, Prisma.gameUncheckedCreateWithoutTypeInput> | Prisma.gameCreateWithoutTypeInput[] | Prisma.gameUncheckedCreateWithoutTypeInput[]
  connectOrCreate?: Prisma.gameCreateOrConnectWithoutTypeInput | Prisma.gameCreateOrConnectWithoutTypeInput[]
  upsert?: Prisma.gameUpsertWithWhereUniqueWithoutTypeInput | Prisma.gameUpsertWithWhereUniqueWithoutTypeInput[]
  createMany?: Prisma.gameCreateManyTypeInputEnvelope
  set?: Prisma.gameWhereUniqueInput | Prisma.gameWhereUniqueInput[]
  disconnect?: Prisma.gameWhereUniqueInput | Prisma.gameWhereUniqueInput[]
  delete?: Prisma.gameWhereUniqueInput | Prisma.gameWhereUniqueInput[]
  connect?: Prisma.gameWhereUniqueInput | Prisma.gameWhereUniqueInput[]
  update?: Prisma.gameUpdateWithWhereUniqueWithoutTypeInput | Prisma.gameUpdateWithWhereUniqueWithoutTypeInput[]
  updateMany?: Prisma.gameUpdateManyWithWhereWithoutTypeInput | Prisma.gameUpdateManyWithWhereWithoutTypeInput[]
  deleteMany?: Prisma.gameScalarWhereInput | Prisma.gameScalarWhereInput[]
}

export type gameUncheckedUpdateManyWithoutTypeNestedInput = {
  create?: Prisma.XOR<Prisma.gameCreateWithoutTypeInput, Prisma.gameUncheckedCreateWithoutTypeInput> | Prisma.gameCreateWithoutTypeInput[] | Prisma.gameUncheckedCreateWithoutTypeInput[]
  connectOrCreate?: Prisma.gameCreateOrConnectWithoutTypeInput | Prisma.gameCreateOrConnectWithoutTypeInput[]
  upsert?: Prisma.gameUpsertWithWhereUniqueWithoutTypeInput | Prisma.gameUpsertWithWhereUniqueWithoutTypeInput[]
  createMany?: Prisma.gameCreateManyTypeInputEnvelope
  set?: Prisma.gameWhereUniqueInput | Prisma.gameWhereUniqueInput[]
  disconnect?: Prisma.gameWhereUniqueInput | Prisma.gameWhereUniqueInput[]
  delete?: Prisma.gameWhereUniqueInput | Prisma.gameWhereUniqueInput[]
  connect?: Prisma.gameWhereUniqueInput | Prisma.gameWhereUniqueInput[]
  update?: Prisma.gameUpdateWithWhereUniqueWithoutTypeInput | Prisma.gameUpdateWithWhereUniqueWithoutTypeInput[]
  updateMany?: Prisma.gameUpdateManyWithWhereWithoutTypeInput | Prisma.gameUpdateManyWithWhereWithoutTypeInput[]
  deleteMany?: Prisma.gameScalarWhereInput | Prisma.gameScalarWhereInput[]
}

export type gameCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.gameCreateWithoutProductInput, Prisma.gameUncheckedCreateWithoutProductInput> | Prisma.gameCreateWithoutProductInput[] | Prisma.gameUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.gameCreateOrConnectWithoutProductInput | Prisma.gameCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.gameCreateManyProductInputEnvelope
  connect?: Prisma.gameWhereUniqueInput | Prisma.gameWhereUniqueInput[]
}

export type gameUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.gameCreateWithoutProductInput, Prisma.gameUncheckedCreateWithoutProductInput> | Prisma.gameCreateWithoutProductInput[] | Prisma.gameUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.gameCreateOrConnectWithoutProductInput | Prisma.gameCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.gameCreateManyProductInputEnvelope
  connect?: Prisma.gameWhereUniqueInput | Prisma.gameWhereUniqueInput[]
}

export type gameUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.gameCreateWithoutProductInput, Prisma.gameUncheckedCreateWithoutProductInput> | Prisma.gameCreateWithoutProductInput[] | Prisma.gameUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.gameCreateOrConnectWithoutProductInput | Prisma.gameCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.gameUpsertWithWhereUniqueWithoutProductInput | Prisma.gameUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.gameCreateManyProductInputEnvelope
  set?: Prisma.gameWhereUniqueInput | Prisma.gameWhereUniqueInput[]
  disconnect?: Prisma.gameWhereUniqueInput | Prisma.gameWhereUniqueInput[]
  delete?: Prisma.gameWhereUniqueInput | Prisma.gameWhereUniqueInput[]
  connect?: Prisma.gameWhereUniqueInput | Prisma.gameWhereUniqueInput[]
  update?: Prisma.gameUpdateWithWhereUniqueWithoutProductInput | Prisma.gameUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.gameUpdateManyWithWhereWithoutProductInput | Prisma.gameUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.gameScalarWhereInput | Prisma.gameScalarWhereInput[]
}

export type gameUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.gameCreateWithoutProductInput, Prisma.gameUncheckedCreateWithoutProductInput> | Prisma.gameCreateWithoutProductInput[] | Prisma.gameUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.gameCreateOrConnectWithoutProductInput | Prisma.gameCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.gameUpsertWithWhereUniqueWithoutProductInput | Prisma.gameUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.gameCreateManyProductInputEnvelope
  set?: Prisma.gameWhereUniqueInput | Prisma.gameWhereUniqueInput[]
  disconnect?: Prisma.gameWhereUniqueInput | Prisma.gameWhereUniqueInput[]
  delete?: Prisma.gameWhereUniqueInput | Prisma.gameWhereUniqueInput[]
  connect?: Prisma.gameWhereUniqueInput | Prisma.gameWhereUniqueInput[]
  update?: Prisma.gameUpdateWithWhereUniqueWithoutProductInput | Prisma.gameUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.gameUpdateManyWithWhereWithoutProductInput | Prisma.gameUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.gameScalarWhereInput | Prisma.gameScalarWhereInput[]
}

export type gameCreateWithoutTypeInput = {
  game_code: string
  game_name: string
  product_id: number
  status: number
  support_currency: string
  allow_free_round: number
  lang_name: string
  lang_icon: string
  product: Prisma.game_productCreateNestedOneWithoutGamesInput
}

export type gameUncheckedCreateWithoutTypeInput = {
  game_code: string
  game_name: string
  product_id: number
  product_code: number
  status: number
  support_currency: string
  allow_free_round: number
  lang_name: string
  lang_icon: string
}

export type gameCreateOrConnectWithoutTypeInput = {
  where: Prisma.gameWhereUniqueInput
  create: Prisma.XOR<Prisma.gameCreateWithoutTypeInput, Prisma.gameUncheckedCreateWithoutTypeInput>
}

export type gameCreateManyTypeInputEnvelope = {
  data: Prisma.gameCreateManyTypeInput | Prisma.gameCreateManyTypeInput[]
  skipDuplicates?: boolean
}

export type gameUpsertWithWhereUniqueWithoutTypeInput = {
  where: Prisma.gameWhereUniqueInput
  update: Prisma.XOR<Prisma.gameUpdateWithoutTypeInput, Prisma.gameUncheckedUpdateWithoutTypeInput>
  create: Prisma.XOR<Prisma.gameCreateWithoutTypeInput, Prisma.gameUncheckedCreateWithoutTypeInput>
}

export type gameUpdateWithWhereUniqueWithoutTypeInput = {
  where: Prisma.gameWhereUniqueInput
  data: Prisma.XOR<Prisma.gameUpdateWithoutTypeInput, Prisma.gameUncheckedUpdateWithoutTypeInput>
}

export type gameUpdateManyWithWhereWithoutTypeInput = {
  where: Prisma.gameScalarWhereInput
  data: Prisma.XOR<Prisma.gameUpdateManyMutationInput, Prisma.gameUncheckedUpdateManyWithoutTypeInput>
}

export type gameScalarWhereInput = {
  AND?: Prisma.gameScalarWhereInput | Prisma.gameScalarWhereInput[]
  OR?: Prisma.gameScalarWhereInput[]
  NOT?: Prisma.gameScalarWhereInput | Prisma.gameScalarWhereInput[]
  game_code?: Prisma.StringFilter<"game"> | string
  game_name?: Prisma.StringFilter<"game"> | string
  game_type?: Prisma.StringFilter<"game"> | string
  product_id?: Prisma.IntFilter<"game"> | number
  product_code?: Prisma.IntFilter<"game"> | number
  status?: Prisma.IntFilter<"game"> | number
  support_currency?: Prisma.StringFilter<"game"> | string
  allow_free_round?: Prisma.IntFilter<"game"> | number
  lang_name?: Prisma.StringFilter<"game"> | string
  lang_icon?: Prisma.StringFilter<"game"> | string
}

export type gameCreateWithoutProductInput = {
  game_code: string
  game_name: string
  product_id: number
  status: number
  support_currency: string
  allow_free_round: number
  lang_name: string
  lang_icon: string
  type: Prisma.game_typeCreateNestedOneWithoutGamesInput
}

export type gameUncheckedCreateWithoutProductInput = {
  game_code: string
  game_name: string
  game_type: string
  product_id: number
  status: number
  support_currency: string
  allow_free_round: number
  lang_name: string
  lang_icon: string
}

export type gameCreateOrConnectWithoutProductInput = {
  where: Prisma.gameWhereUniqueInput
  create: Prisma.XOR<Prisma.gameCreateWithoutProductInput, Prisma.gameUncheckedCreateWithoutProductInput>
}

export type gameCreateManyProductInputEnvelope = {
  data: Prisma.gameCreateManyProductInput | Prisma.gameCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type gameUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.gameWhereUniqueInput
  update: Prisma.XOR<Prisma.gameUpdateWithoutProductInput, Prisma.gameUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.gameCreateWithoutProductInput, Prisma.gameUncheckedCreateWithoutProductInput>
}

export type gameUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.gameWhereUniqueInput
  data: Prisma.XOR<Prisma.gameUpdateWithoutProductInput, Prisma.gameUncheckedUpdateWithoutProductInput>
}

export type gameUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.gameScalarWhereInput
  data: Prisma.XOR<Prisma.gameUpdateManyMutationInput, Prisma.gameUncheckedUpdateManyWithoutProductInput>
}

export type gameCreateManyTypeInput = {
  game_code: string
  game_name: string
  product_id: number
  product_code: number
  status: number
  support_currency: string
  allow_free_round: number
  lang_name: string
  lang_icon: string
}

export type gameUpdateWithoutTypeInput = {
  game_code?: Prisma.StringFieldUpdateOperationsInput | string
  game_name?: Prisma.StringFieldUpdateOperationsInput | string
  product_id?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  support_currency?: Prisma.StringFieldUpdateOperationsInput | string
  allow_free_round?: Prisma.IntFieldUpdateOperationsInput | number
  lang_name?: Prisma.StringFieldUpdateOperationsInput | string
  lang_icon?: Prisma.StringFieldUpdateOperationsInput | string
  product?: Prisma.game_productUpdateOneRequiredWithoutGamesNestedInput
}

export type gameUncheckedUpdateWithoutTypeInput = {
  game_code?: Prisma.StringFieldUpdateOperationsInput | string
  game_name?: Prisma.StringFieldUpdateOperationsInput | string
  product_id?: Prisma.IntFieldUpdateOperationsInput | number
  product_code?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  support_currency?: Prisma.StringFieldUpdateOperationsInput | string
  allow_free_round?: Prisma.IntFieldUpdateOperationsInput | number
  lang_name?: Prisma.StringFieldUpdateOperationsInput | string
  lang_icon?: Prisma.StringFieldUpdateOperationsInput | string
}

export type gameUncheckedUpdateManyWithoutTypeInput = {
  game_code?: Prisma.StringFieldUpdateOperationsInput | string
  game_name?: Prisma.StringFieldUpdateOperationsInput | string
  product_id?: Prisma.IntFieldUpdateOperationsInput | number
  product_code?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  support_currency?: Prisma.StringFieldUpdateOperationsInput | string
  allow_free_round?: Prisma.IntFieldUpdateOperationsInput | number
  lang_name?: Prisma.StringFieldUpdateOperationsInput | string
  lang_icon?: Prisma.StringFieldUpdateOperationsInput | string
}

export type gameCreateManyProductInput = {
  game_code: string
  game_name: string
  game_type: string
  product_id: number
  status: number
  support_currency: string
  allow_free_round: number
  lang_name: string
  lang_icon: string
}

export type gameUpdateWithoutProductInput = {
  game_code?: Prisma.StringFieldUpdateOperationsInput | string
  game_name?: Prisma.StringFieldUpdateOperationsInput | string
  product_id?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  support_currency?: Prisma.StringFieldUpdateOperationsInput | string
  allow_free_round?: Prisma.IntFieldUpdateOperationsInput | number
  lang_name?: Prisma.StringFieldUpdateOperationsInput | string
  lang_icon?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.game_typeUpdateOneRequiredWithoutGamesNestedInput
}

export type gameUncheckedUpdateWithoutProductInput = {
  game_code?: Prisma.StringFieldUpdateOperationsInput | string
  game_name?: Prisma.StringFieldUpdateOperationsInput | string
  game_type?: Prisma.StringFieldUpdateOperationsInput | string
  product_id?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  support_currency?: Prisma.StringFieldUpdateOperationsInput | string
  allow_free_round?: Prisma.IntFieldUpdateOperationsInput | number
  lang_name?: Prisma.StringFieldUpdateOperationsInput | string
  lang_icon?: Prisma.StringFieldUpdateOperationsInput | string
}

export type gameUncheckedUpdateManyWithoutProductInput = {
  game_code?: Prisma.StringFieldUpdateOperationsInput | string
  game_name?: Prisma.StringFieldUpdateOperationsInput | string
  game_type?: Prisma.StringFieldUpdateOperationsInput | string
  product_id?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  support_currency?: Prisma.StringFieldUpdateOperationsInput | string
  allow_free_round?: Prisma.IntFieldUpdateOperationsInput | number
  lang_name?: Prisma.StringFieldUpdateOperationsInput | string
  lang_icon?: Prisma.StringFieldUpdateOperationsInput | string
}



export type gameSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  game_code?: boolean
  game_name?: boolean
  game_type?: boolean
  product_id?: boolean
  product_code?: boolean
  status?: boolean
  support_currency?: boolean
  allow_free_round?: boolean
  lang_name?: boolean
  lang_icon?: boolean
  type?: boolean | Prisma.game_typeDefaultArgs<ExtArgs>
  product?: boolean | Prisma.game_productDefaultArgs<ExtArgs>
}, ExtArgs["result"]["game"]>



export type gameSelectScalar = {
  game_code?: boolean
  game_name?: boolean
  game_type?: boolean
  product_id?: boolean
  product_code?: boolean
  status?: boolean
  support_currency?: boolean
  allow_free_round?: boolean
  lang_name?: boolean
  lang_icon?: boolean
}

export type gameOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"game_code" | "game_name" | "game_type" | "product_id" | "product_code" | "status" | "support_currency" | "allow_free_round" | "lang_name" | "lang_icon", ExtArgs["result"]["game"]>
export type gameInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  type?: boolean | Prisma.game_typeDefaultArgs<ExtArgs>
  product?: boolean | Prisma.game_productDefaultArgs<ExtArgs>
}

export type $gamePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "game"
  objects: {
    type: Prisma.$game_typePayload<ExtArgs>
    product: Prisma.$game_productPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    game_code: string
    game_name: string
    game_type: string
    product_id: number
    product_code: number
    status: number
    support_currency: string
    allow_free_round: number
    lang_name: string
    lang_icon: string
  }, ExtArgs["result"]["game"]>
  composites: {}
}

export type gameGetPayload<S extends boolean | null | undefined | gameDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$gamePayload, S>

export type gameCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<gameFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GameCountAggregateInputType | true
  }

export interface gameDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['game'], meta: { name: 'game' } }
  /**
   * Find zero or one Game that matches the filter.
   * @param {gameFindUniqueArgs} args - Arguments to find a Game
   * @example
   * // Get one Game
   * const game = await prisma.game.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends gameFindUniqueArgs>(args: Prisma.SelectSubset<T, gameFindUniqueArgs<ExtArgs>>): Prisma.Prisma__gameClient<runtime.Types.Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Game that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {gameFindUniqueOrThrowArgs} args - Arguments to find a Game
   * @example
   * // Get one Game
   * const game = await prisma.game.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends gameFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, gameFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__gameClient<runtime.Types.Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Game that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {gameFindFirstArgs} args - Arguments to find a Game
   * @example
   * // Get one Game
   * const game = await prisma.game.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends gameFindFirstArgs>(args?: Prisma.SelectSubset<T, gameFindFirstArgs<ExtArgs>>): Prisma.Prisma__gameClient<runtime.Types.Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Game that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {gameFindFirstOrThrowArgs} args - Arguments to find a Game
   * @example
   * // Get one Game
   * const game = await prisma.game.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends gameFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, gameFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__gameClient<runtime.Types.Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Games that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {gameFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Games
   * const games = await prisma.game.findMany()
   * 
   * // Get first 10 Games
   * const games = await prisma.game.findMany({ take: 10 })
   * 
   * // Only select the `game_code`
   * const gameWithGame_codeOnly = await prisma.game.findMany({ select: { game_code: true } })
   * 
   */
  findMany<T extends gameFindManyArgs>(args?: Prisma.SelectSubset<T, gameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Game.
   * @param {gameCreateArgs} args - Arguments to create a Game.
   * @example
   * // Create one Game
   * const Game = await prisma.game.create({
   *   data: {
   *     // ... data to create a Game
   *   }
   * })
   * 
   */
  create<T extends gameCreateArgs>(args: Prisma.SelectSubset<T, gameCreateArgs<ExtArgs>>): Prisma.Prisma__gameClient<runtime.Types.Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Games.
   * @param {gameCreateManyArgs} args - Arguments to create many Games.
   * @example
   * // Create many Games
   * const game = await prisma.game.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends gameCreateManyArgs>(args?: Prisma.SelectSubset<T, gameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Game.
   * @param {gameDeleteArgs} args - Arguments to delete one Game.
   * @example
   * // Delete one Game
   * const Game = await prisma.game.delete({
   *   where: {
   *     // ... filter to delete one Game
   *   }
   * })
   * 
   */
  delete<T extends gameDeleteArgs>(args: Prisma.SelectSubset<T, gameDeleteArgs<ExtArgs>>): Prisma.Prisma__gameClient<runtime.Types.Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Game.
   * @param {gameUpdateArgs} args - Arguments to update one Game.
   * @example
   * // Update one Game
   * const game = await prisma.game.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends gameUpdateArgs>(args: Prisma.SelectSubset<T, gameUpdateArgs<ExtArgs>>): Prisma.Prisma__gameClient<runtime.Types.Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Games.
   * @param {gameDeleteManyArgs} args - Arguments to filter Games to delete.
   * @example
   * // Delete a few Games
   * const { count } = await prisma.game.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends gameDeleteManyArgs>(args?: Prisma.SelectSubset<T, gameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Games.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {gameUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Games
   * const game = await prisma.game.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends gameUpdateManyArgs>(args: Prisma.SelectSubset<T, gameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Game.
   * @param {gameUpsertArgs} args - Arguments to update or create a Game.
   * @example
   * // Update or create a Game
   * const game = await prisma.game.upsert({
   *   create: {
   *     // ... data to create a Game
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Game we want to update
   *   }
   * })
   */
  upsert<T extends gameUpsertArgs>(args: Prisma.SelectSubset<T, gameUpsertArgs<ExtArgs>>): Prisma.Prisma__gameClient<runtime.Types.Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Games.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {gameCountArgs} args - Arguments to filter Games to count.
   * @example
   * // Count the number of Games
   * const count = await prisma.game.count({
   *   where: {
   *     // ... the filter for the Games we want to count
   *   }
   * })
  **/
  count<T extends gameCountArgs>(
    args?: Prisma.Subset<T, gameCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GameCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Game.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GameAggregateArgs>(args: Prisma.Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

  /**
   * Group by Game.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {gameGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends gameGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: gameGroupByArgs['orderBy'] }
      : { orderBy?: gameGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, gameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the game model
 */
readonly fields: gameFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for game.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__gameClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  type<T extends Prisma.game_typeDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.game_typeDefaultArgs<ExtArgs>>): Prisma.Prisma__game_typeClient<runtime.Types.Result.GetResult<Prisma.$game_typePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  product<T extends Prisma.game_productDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.game_productDefaultArgs<ExtArgs>>): Prisma.Prisma__game_productClient<runtime.Types.Result.GetResult<Prisma.$game_productPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the game model
 */
export interface gameFieldRefs {
  readonly game_code: Prisma.FieldRef<"game", 'String'>
  readonly game_name: Prisma.FieldRef<"game", 'String'>
  readonly game_type: Prisma.FieldRef<"game", 'String'>
  readonly product_id: Prisma.FieldRef<"game", 'Int'>
  readonly product_code: Prisma.FieldRef<"game", 'Int'>
  readonly status: Prisma.FieldRef<"game", 'Int'>
  readonly support_currency: Prisma.FieldRef<"game", 'String'>
  readonly allow_free_round: Prisma.FieldRef<"game", 'Int'>
  readonly lang_name: Prisma.FieldRef<"game", 'String'>
  readonly lang_icon: Prisma.FieldRef<"game", 'String'>
}
    

// Custom InputTypes
/**
 * game findUnique
 */
export type gameFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game
   */
  select?: Prisma.gameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game
   */
  omit?: Prisma.gameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gameInclude<ExtArgs> | null
  /**
   * Filter, which game to fetch.
   */
  where: Prisma.gameWhereUniqueInput
}

/**
 * game findUniqueOrThrow
 */
export type gameFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game
   */
  select?: Prisma.gameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game
   */
  omit?: Prisma.gameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gameInclude<ExtArgs> | null
  /**
   * Filter, which game to fetch.
   */
  where: Prisma.gameWhereUniqueInput
}

/**
 * game findFirst
 */
export type gameFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game
   */
  select?: Prisma.gameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game
   */
  omit?: Prisma.gameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gameInclude<ExtArgs> | null
  /**
   * Filter, which game to fetch.
   */
  where?: Prisma.gameWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of games to fetch.
   */
  orderBy?: Prisma.gameOrderByWithRelationInput | Prisma.gameOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for games.
   */
  cursor?: Prisma.gameWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` games from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` games.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of games.
   */
  distinct?: Prisma.GameScalarFieldEnum | Prisma.GameScalarFieldEnum[]
}

/**
 * game findFirstOrThrow
 */
export type gameFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game
   */
  select?: Prisma.gameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game
   */
  omit?: Prisma.gameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gameInclude<ExtArgs> | null
  /**
   * Filter, which game to fetch.
   */
  where?: Prisma.gameWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of games to fetch.
   */
  orderBy?: Prisma.gameOrderByWithRelationInput | Prisma.gameOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for games.
   */
  cursor?: Prisma.gameWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` games from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` games.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of games.
   */
  distinct?: Prisma.GameScalarFieldEnum | Prisma.GameScalarFieldEnum[]
}

/**
 * game findMany
 */
export type gameFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game
   */
  select?: Prisma.gameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game
   */
  omit?: Prisma.gameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gameInclude<ExtArgs> | null
  /**
   * Filter, which games to fetch.
   */
  where?: Prisma.gameWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of games to fetch.
   */
  orderBy?: Prisma.gameOrderByWithRelationInput | Prisma.gameOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing games.
   */
  cursor?: Prisma.gameWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` games from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` games.
   */
  skip?: number
  distinct?: Prisma.GameScalarFieldEnum | Prisma.GameScalarFieldEnum[]
}

/**
 * game create
 */
export type gameCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game
   */
  select?: Prisma.gameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game
   */
  omit?: Prisma.gameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gameInclude<ExtArgs> | null
  /**
   * The data needed to create a game.
   */
  data: Prisma.XOR<Prisma.gameCreateInput, Prisma.gameUncheckedCreateInput>
}

/**
 * game createMany
 */
export type gameCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many games.
   */
  data: Prisma.gameCreateManyInput | Prisma.gameCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * game update
 */
export type gameUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game
   */
  select?: Prisma.gameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game
   */
  omit?: Prisma.gameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gameInclude<ExtArgs> | null
  /**
   * The data needed to update a game.
   */
  data: Prisma.XOR<Prisma.gameUpdateInput, Prisma.gameUncheckedUpdateInput>
  /**
   * Choose, which game to update.
   */
  where: Prisma.gameWhereUniqueInput
}

/**
 * game updateMany
 */
export type gameUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update games.
   */
  data: Prisma.XOR<Prisma.gameUpdateManyMutationInput, Prisma.gameUncheckedUpdateManyInput>
  /**
   * Filter which games to update
   */
  where?: Prisma.gameWhereInput
  /**
   * Limit how many games to update.
   */
  limit?: number
}

/**
 * game upsert
 */
export type gameUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game
   */
  select?: Prisma.gameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game
   */
  omit?: Prisma.gameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gameInclude<ExtArgs> | null
  /**
   * The filter to search for the game to update in case it exists.
   */
  where: Prisma.gameWhereUniqueInput
  /**
   * In case the game found by the `where` argument doesn't exist, create a new game with this data.
   */
  create: Prisma.XOR<Prisma.gameCreateInput, Prisma.gameUncheckedCreateInput>
  /**
   * In case the game was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.gameUpdateInput, Prisma.gameUncheckedUpdateInput>
}

/**
 * game delete
 */
export type gameDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game
   */
  select?: Prisma.gameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game
   */
  omit?: Prisma.gameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gameInclude<ExtArgs> | null
  /**
   * Filter which game to delete.
   */
  where: Prisma.gameWhereUniqueInput
}

/**
 * game deleteMany
 */
export type gameDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which games to delete
   */
  where?: Prisma.gameWhereInput
  /**
   * Limit how many games to delete.
   */
  limit?: number
}

/**
 * game without action
 */
export type gameDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game
   */
  select?: Prisma.gameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game
   */
  omit?: Prisma.gameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gameInclude<ExtArgs> | null
}
