
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `game_product` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model game_product
 * 
 */
export type game_productModel = runtime.Types.Result.DefaultSelection<Prisma.$game_productPayload>

export type AggregateGame_product = {
  _count: Game_productCountAggregateOutputType | null
  _avg: Game_productAvgAggregateOutputType | null
  _sum: Game_productSumAggregateOutputType | null
  _min: Game_productMinAggregateOutputType | null
  _max: Game_productMaxAggregateOutputType | null
}

export type Game_productAvgAggregateOutputType = {
  id: number | null
}

export type Game_productSumAggregateOutputType = {
  id: number | null
}

export type Game_productMinAggregateOutputType = {
  id: number | null
}

export type Game_productMaxAggregateOutputType = {
  id: number | null
}

export type Game_productCountAggregateOutputType = {
  id: number
  _all: number
}


export type Game_productAvgAggregateInputType = {
  id?: true
}

export type Game_productSumAggregateInputType = {
  id?: true
}

export type Game_productMinAggregateInputType = {
  id?: true
}

export type Game_productMaxAggregateInputType = {
  id?: true
}

export type Game_productCountAggregateInputType = {
  id?: true
  _all?: true
}

export type Game_productAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which game_product to aggregate.
   */
  where?: Prisma.game_productWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of game_products to fetch.
   */
  orderBy?: Prisma.game_productOrderByWithRelationInput | Prisma.game_productOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.game_productWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` game_products from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` game_products.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned game_products
  **/
  _count?: true | Game_productCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Game_productAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Game_productSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Game_productMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Game_productMaxAggregateInputType
}

export type GetGame_productAggregateType<T extends Game_productAggregateArgs> = {
      [P in keyof T & keyof AggregateGame_product]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGame_product[P]>
    : Prisma.GetScalarType<T[P], AggregateGame_product[P]>
}




export type game_productGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.game_productWhereInput
  orderBy?: Prisma.game_productOrderByWithAggregationInput | Prisma.game_productOrderByWithAggregationInput[]
  by: Prisma.Game_productScalarFieldEnum[] | Prisma.Game_productScalarFieldEnum
  having?: Prisma.game_productScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Game_productCountAggregateInputType | true
  _avg?: Game_productAvgAggregateInputType
  _sum?: Game_productSumAggregateInputType
  _min?: Game_productMinAggregateInputType
  _max?: Game_productMaxAggregateInputType
}

export type Game_productGroupByOutputType = {
  id: number
  _count: Game_productCountAggregateOutputType | null
  _avg: Game_productAvgAggregateOutputType | null
  _sum: Game_productSumAggregateOutputType | null
  _min: Game_productMinAggregateOutputType | null
  _max: Game_productMaxAggregateOutputType | null
}

type GetGame_productGroupByPayload<T extends game_productGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Game_productGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Game_productGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Game_productGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Game_productGroupByOutputType[P]>
      }
    >
  >



export type game_productWhereInput = {
  AND?: Prisma.game_productWhereInput | Prisma.game_productWhereInput[]
  OR?: Prisma.game_productWhereInput[]
  NOT?: Prisma.game_productWhereInput | Prisma.game_productWhereInput[]
  id?: Prisma.IntFilter<"game_product"> | number
  games?: Prisma.GameListRelationFilter
}

export type game_productOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  games?: Prisma.gameOrderByRelationAggregateInput
}

export type game_productWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.game_productWhereInput | Prisma.game_productWhereInput[]
  OR?: Prisma.game_productWhereInput[]
  NOT?: Prisma.game_productWhereInput | Prisma.game_productWhereInput[]
  games?: Prisma.GameListRelationFilter
}, "id">

export type game_productOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  _count?: Prisma.game_productCountOrderByAggregateInput
  _avg?: Prisma.game_productAvgOrderByAggregateInput
  _max?: Prisma.game_productMaxOrderByAggregateInput
  _min?: Prisma.game_productMinOrderByAggregateInput
  _sum?: Prisma.game_productSumOrderByAggregateInput
}

export type game_productScalarWhereWithAggregatesInput = {
  AND?: Prisma.game_productScalarWhereWithAggregatesInput | Prisma.game_productScalarWhereWithAggregatesInput[]
  OR?: Prisma.game_productScalarWhereWithAggregatesInput[]
  NOT?: Prisma.game_productScalarWhereWithAggregatesInput | Prisma.game_productScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"game_product"> | number
}

export type game_productCreateInput = {
  id: number
  games?: Prisma.gameCreateNestedManyWithoutProductInput
}

export type game_productUncheckedCreateInput = {
  id: number
  games?: Prisma.gameUncheckedCreateNestedManyWithoutProductInput
}

export type game_productUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  games?: Prisma.gameUpdateManyWithoutProductNestedInput
}

export type game_productUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  games?: Prisma.gameUncheckedUpdateManyWithoutProductNestedInput
}

export type game_productCreateManyInput = {
  id: number
}

export type game_productUpdateManyMutationInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
}

export type game_productUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
}

export type game_productCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type game_productAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type game_productMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type game_productMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type game_productSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type Game_productScalarRelationFilter = {
  is?: Prisma.game_productWhereInput
  isNot?: Prisma.game_productWhereInput
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type game_productCreateNestedOneWithoutGamesInput = {
  create?: Prisma.XOR<Prisma.game_productCreateWithoutGamesInput, Prisma.game_productUncheckedCreateWithoutGamesInput>
  connectOrCreate?: Prisma.game_productCreateOrConnectWithoutGamesInput
  connect?: Prisma.game_productWhereUniqueInput
}

export type game_productUpdateOneRequiredWithoutGamesNestedInput = {
  create?: Prisma.XOR<Prisma.game_productCreateWithoutGamesInput, Prisma.game_productUncheckedCreateWithoutGamesInput>
  connectOrCreate?: Prisma.game_productCreateOrConnectWithoutGamesInput
  upsert?: Prisma.game_productUpsertWithoutGamesInput
  connect?: Prisma.game_productWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.game_productUpdateToOneWithWhereWithoutGamesInput, Prisma.game_productUpdateWithoutGamesInput>, Prisma.game_productUncheckedUpdateWithoutGamesInput>
}

export type game_productCreateWithoutGamesInput = {
  id: number
}

export type game_productUncheckedCreateWithoutGamesInput = {
  id: number
}

export type game_productCreateOrConnectWithoutGamesInput = {
  where: Prisma.game_productWhereUniqueInput
  create: Prisma.XOR<Prisma.game_productCreateWithoutGamesInput, Prisma.game_productUncheckedCreateWithoutGamesInput>
}

export type game_productUpsertWithoutGamesInput = {
  update: Prisma.XOR<Prisma.game_productUpdateWithoutGamesInput, Prisma.game_productUncheckedUpdateWithoutGamesInput>
  create: Prisma.XOR<Prisma.game_productCreateWithoutGamesInput, Prisma.game_productUncheckedCreateWithoutGamesInput>
  where?: Prisma.game_productWhereInput
}

export type game_productUpdateToOneWithWhereWithoutGamesInput = {
  where?: Prisma.game_productWhereInput
  data: Prisma.XOR<Prisma.game_productUpdateWithoutGamesInput, Prisma.game_productUncheckedUpdateWithoutGamesInput>
}

export type game_productUpdateWithoutGamesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
}

export type game_productUncheckedUpdateWithoutGamesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
}


/**
 * Count Type Game_productCountOutputType
 */

export type Game_productCountOutputType = {
  games: number
}

export type Game_productCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  games?: boolean | Game_productCountOutputTypeCountGamesArgs
}

/**
 * Game_productCountOutputType without action
 */
export type Game_productCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game_productCountOutputType
   */
  select?: Prisma.Game_productCountOutputTypeSelect<ExtArgs> | null
}

/**
 * Game_productCountOutputType without action
 */
export type Game_productCountOutputTypeCountGamesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.gameWhereInput
}


export type game_productSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  games?: boolean | Prisma.game_product$gamesArgs<ExtArgs>
  _count?: boolean | Prisma.Game_productCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["game_product"]>



export type game_productSelectScalar = {
  id?: boolean
}

export type game_productOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id", ExtArgs["result"]["game_product"]>
export type game_productInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  games?: boolean | Prisma.game_product$gamesArgs<ExtArgs>
  _count?: boolean | Prisma.Game_productCountOutputTypeDefaultArgs<ExtArgs>
}

export type $game_productPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "game_product"
  objects: {
    games: Prisma.$gamePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
  }, ExtArgs["result"]["game_product"]>
  composites: {}
}

export type game_productGetPayload<S extends boolean | null | undefined | game_productDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$game_productPayload, S>

export type game_productCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<game_productFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Game_productCountAggregateInputType | true
  }

export interface game_productDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['game_product'], meta: { name: 'game_product' } }
  /**
   * Find zero or one Game_product that matches the filter.
   * @param {game_productFindUniqueArgs} args - Arguments to find a Game_product
   * @example
   * // Get one Game_product
   * const game_product = await prisma.game_product.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends game_productFindUniqueArgs>(args: Prisma.SelectSubset<T, game_productFindUniqueArgs<ExtArgs>>): Prisma.Prisma__game_productClient<runtime.Types.Result.GetResult<Prisma.$game_productPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Game_product that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {game_productFindUniqueOrThrowArgs} args - Arguments to find a Game_product
   * @example
   * // Get one Game_product
   * const game_product = await prisma.game_product.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends game_productFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, game_productFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__game_productClient<runtime.Types.Result.GetResult<Prisma.$game_productPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Game_product that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {game_productFindFirstArgs} args - Arguments to find a Game_product
   * @example
   * // Get one Game_product
   * const game_product = await prisma.game_product.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends game_productFindFirstArgs>(args?: Prisma.SelectSubset<T, game_productFindFirstArgs<ExtArgs>>): Prisma.Prisma__game_productClient<runtime.Types.Result.GetResult<Prisma.$game_productPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Game_product that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {game_productFindFirstOrThrowArgs} args - Arguments to find a Game_product
   * @example
   * // Get one Game_product
   * const game_product = await prisma.game_product.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends game_productFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, game_productFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__game_productClient<runtime.Types.Result.GetResult<Prisma.$game_productPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Game_products that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {game_productFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Game_products
   * const game_products = await prisma.game_product.findMany()
   * 
   * // Get first 10 Game_products
   * const game_products = await prisma.game_product.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const game_productWithIdOnly = await prisma.game_product.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends game_productFindManyArgs>(args?: Prisma.SelectSubset<T, game_productFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$game_productPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Game_product.
   * @param {game_productCreateArgs} args - Arguments to create a Game_product.
   * @example
   * // Create one Game_product
   * const Game_product = await prisma.game_product.create({
   *   data: {
   *     // ... data to create a Game_product
   *   }
   * })
   * 
   */
  create<T extends game_productCreateArgs>(args: Prisma.SelectSubset<T, game_productCreateArgs<ExtArgs>>): Prisma.Prisma__game_productClient<runtime.Types.Result.GetResult<Prisma.$game_productPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Game_products.
   * @param {game_productCreateManyArgs} args - Arguments to create many Game_products.
   * @example
   * // Create many Game_products
   * const game_product = await prisma.game_product.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends game_productCreateManyArgs>(args?: Prisma.SelectSubset<T, game_productCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Game_product.
   * @param {game_productDeleteArgs} args - Arguments to delete one Game_product.
   * @example
   * // Delete one Game_product
   * const Game_product = await prisma.game_product.delete({
   *   where: {
   *     // ... filter to delete one Game_product
   *   }
   * })
   * 
   */
  delete<T extends game_productDeleteArgs>(args: Prisma.SelectSubset<T, game_productDeleteArgs<ExtArgs>>): Prisma.Prisma__game_productClient<runtime.Types.Result.GetResult<Prisma.$game_productPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Game_product.
   * @param {game_productUpdateArgs} args - Arguments to update one Game_product.
   * @example
   * // Update one Game_product
   * const game_product = await prisma.game_product.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends game_productUpdateArgs>(args: Prisma.SelectSubset<T, game_productUpdateArgs<ExtArgs>>): Prisma.Prisma__game_productClient<runtime.Types.Result.GetResult<Prisma.$game_productPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Game_products.
   * @param {game_productDeleteManyArgs} args - Arguments to filter Game_products to delete.
   * @example
   * // Delete a few Game_products
   * const { count } = await prisma.game_product.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends game_productDeleteManyArgs>(args?: Prisma.SelectSubset<T, game_productDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Game_products.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {game_productUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Game_products
   * const game_product = await prisma.game_product.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends game_productUpdateManyArgs>(args: Prisma.SelectSubset<T, game_productUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Game_product.
   * @param {game_productUpsertArgs} args - Arguments to update or create a Game_product.
   * @example
   * // Update or create a Game_product
   * const game_product = await prisma.game_product.upsert({
   *   create: {
   *     // ... data to create a Game_product
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Game_product we want to update
   *   }
   * })
   */
  upsert<T extends game_productUpsertArgs>(args: Prisma.SelectSubset<T, game_productUpsertArgs<ExtArgs>>): Prisma.Prisma__game_productClient<runtime.Types.Result.GetResult<Prisma.$game_productPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Game_products.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {game_productCountArgs} args - Arguments to filter Game_products to count.
   * @example
   * // Count the number of Game_products
   * const count = await prisma.game_product.count({
   *   where: {
   *     // ... the filter for the Game_products we want to count
   *   }
   * })
  **/
  count<T extends game_productCountArgs>(
    args?: Prisma.Subset<T, game_productCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Game_productCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Game_product.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Game_productAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Game_productAggregateArgs>(args: Prisma.Subset<T, Game_productAggregateArgs>): Prisma.PrismaPromise<GetGame_productAggregateType<T>>

  /**
   * Group by Game_product.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {game_productGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends game_productGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: game_productGroupByArgs['orderBy'] }
      : { orderBy?: game_productGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, game_productGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGame_productGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the game_product model
 */
readonly fields: game_productFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for game_product.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__game_productClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  games<T extends Prisma.game_product$gamesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.game_product$gamesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the game_product model
 */
export interface game_productFieldRefs {
  readonly id: Prisma.FieldRef<"game_product", 'Int'>
}
    

// Custom InputTypes
/**
 * game_product findUnique
 */
export type game_productFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game_product
   */
  select?: Prisma.game_productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game_product
   */
  omit?: Prisma.game_productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.game_productInclude<ExtArgs> | null
  /**
   * Filter, which game_product to fetch.
   */
  where: Prisma.game_productWhereUniqueInput
}

/**
 * game_product findUniqueOrThrow
 */
export type game_productFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game_product
   */
  select?: Prisma.game_productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game_product
   */
  omit?: Prisma.game_productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.game_productInclude<ExtArgs> | null
  /**
   * Filter, which game_product to fetch.
   */
  where: Prisma.game_productWhereUniqueInput
}

/**
 * game_product findFirst
 */
export type game_productFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game_product
   */
  select?: Prisma.game_productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game_product
   */
  omit?: Prisma.game_productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.game_productInclude<ExtArgs> | null
  /**
   * Filter, which game_product to fetch.
   */
  where?: Prisma.game_productWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of game_products to fetch.
   */
  orderBy?: Prisma.game_productOrderByWithRelationInput | Prisma.game_productOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for game_products.
   */
  cursor?: Prisma.game_productWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` game_products from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` game_products.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of game_products.
   */
  distinct?: Prisma.Game_productScalarFieldEnum | Prisma.Game_productScalarFieldEnum[]
}

/**
 * game_product findFirstOrThrow
 */
export type game_productFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game_product
   */
  select?: Prisma.game_productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game_product
   */
  omit?: Prisma.game_productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.game_productInclude<ExtArgs> | null
  /**
   * Filter, which game_product to fetch.
   */
  where?: Prisma.game_productWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of game_products to fetch.
   */
  orderBy?: Prisma.game_productOrderByWithRelationInput | Prisma.game_productOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for game_products.
   */
  cursor?: Prisma.game_productWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` game_products from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` game_products.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of game_products.
   */
  distinct?: Prisma.Game_productScalarFieldEnum | Prisma.Game_productScalarFieldEnum[]
}

/**
 * game_product findMany
 */
export type game_productFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game_product
   */
  select?: Prisma.game_productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game_product
   */
  omit?: Prisma.game_productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.game_productInclude<ExtArgs> | null
  /**
   * Filter, which game_products to fetch.
   */
  where?: Prisma.game_productWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of game_products to fetch.
   */
  orderBy?: Prisma.game_productOrderByWithRelationInput | Prisma.game_productOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing game_products.
   */
  cursor?: Prisma.game_productWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` game_products from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` game_products.
   */
  skip?: number
  distinct?: Prisma.Game_productScalarFieldEnum | Prisma.Game_productScalarFieldEnum[]
}

/**
 * game_product create
 */
export type game_productCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game_product
   */
  select?: Prisma.game_productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game_product
   */
  omit?: Prisma.game_productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.game_productInclude<ExtArgs> | null
  /**
   * The data needed to create a game_product.
   */
  data: Prisma.XOR<Prisma.game_productCreateInput, Prisma.game_productUncheckedCreateInput>
}

/**
 * game_product createMany
 */
export type game_productCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many game_products.
   */
  data: Prisma.game_productCreateManyInput | Prisma.game_productCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * game_product update
 */
export type game_productUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game_product
   */
  select?: Prisma.game_productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game_product
   */
  omit?: Prisma.game_productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.game_productInclude<ExtArgs> | null
  /**
   * The data needed to update a game_product.
   */
  data: Prisma.XOR<Prisma.game_productUpdateInput, Prisma.game_productUncheckedUpdateInput>
  /**
   * Choose, which game_product to update.
   */
  where: Prisma.game_productWhereUniqueInput
}

/**
 * game_product updateMany
 */
export type game_productUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update game_products.
   */
  data: Prisma.XOR<Prisma.game_productUpdateManyMutationInput, Prisma.game_productUncheckedUpdateManyInput>
  /**
   * Filter which game_products to update
   */
  where?: Prisma.game_productWhereInput
  /**
   * Limit how many game_products to update.
   */
  limit?: number
}

/**
 * game_product upsert
 */
export type game_productUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game_product
   */
  select?: Prisma.game_productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game_product
   */
  omit?: Prisma.game_productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.game_productInclude<ExtArgs> | null
  /**
   * The filter to search for the game_product to update in case it exists.
   */
  where: Prisma.game_productWhereUniqueInput
  /**
   * In case the game_product found by the `where` argument doesn't exist, create a new game_product with this data.
   */
  create: Prisma.XOR<Prisma.game_productCreateInput, Prisma.game_productUncheckedCreateInput>
  /**
   * In case the game_product was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.game_productUpdateInput, Prisma.game_productUncheckedUpdateInput>
}

/**
 * game_product delete
 */
export type game_productDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game_product
   */
  select?: Prisma.game_productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game_product
   */
  omit?: Prisma.game_productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.game_productInclude<ExtArgs> | null
  /**
   * Filter which game_product to delete.
   */
  where: Prisma.game_productWhereUniqueInput
}

/**
 * game_product deleteMany
 */
export type game_productDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which game_products to delete
   */
  where?: Prisma.game_productWhereInput
  /**
   * Limit how many game_products to delete.
   */
  limit?: number
}

/**
 * game_product.games
 */
export type game_product$gamesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game
   */
  select?: Prisma.gameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game
   */
  omit?: Prisma.gameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gameInclude<ExtArgs> | null
  where?: Prisma.gameWhereInput
  orderBy?: Prisma.gameOrderByWithRelationInput | Prisma.gameOrderByWithRelationInput[]
  cursor?: Prisma.gameWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.GameScalarFieldEnum | Prisma.GameScalarFieldEnum[]
}

/**
 * game_product without action
 */
export type game_productDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game_product
   */
  select?: Prisma.game_productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game_product
   */
  omit?: Prisma.game_productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.game_productInclude<ExtArgs> | null
}
