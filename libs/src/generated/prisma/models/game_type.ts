
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `game_type` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model game_type
 * 
 */
export type game_typeModel = runtime.Types.Result.DefaultSelection<Prisma.$game_typePayload>

export type AggregateGame_type = {
  _count: Game_typeCountAggregateOutputType | null
  _min: Game_typeMinAggregateOutputType | null
  _max: Game_typeMaxAggregateOutputType | null
}

export type Game_typeMinAggregateOutputType = {
  type: string | null
}

export type Game_typeMaxAggregateOutputType = {
  type: string | null
}

export type Game_typeCountAggregateOutputType = {
  type: number
  _all: number
}


export type Game_typeMinAggregateInputType = {
  type?: true
}

export type Game_typeMaxAggregateInputType = {
  type?: true
}

export type Game_typeCountAggregateInputType = {
  type?: true
  _all?: true
}

export type Game_typeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which game_type to aggregate.
   */
  where?: Prisma.game_typeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of game_types to fetch.
   */
  orderBy?: Prisma.game_typeOrderByWithRelationInput | Prisma.game_typeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.game_typeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` game_types from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` game_types.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned game_types
  **/
  _count?: true | Game_typeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Game_typeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Game_typeMaxAggregateInputType
}

export type GetGame_typeAggregateType<T extends Game_typeAggregateArgs> = {
      [P in keyof T & keyof AggregateGame_type]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGame_type[P]>
    : Prisma.GetScalarType<T[P], AggregateGame_type[P]>
}




export type game_typeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.game_typeWhereInput
  orderBy?: Prisma.game_typeOrderByWithAggregationInput | Prisma.game_typeOrderByWithAggregationInput[]
  by: Prisma.Game_typeScalarFieldEnum[] | Prisma.Game_typeScalarFieldEnum
  having?: Prisma.game_typeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Game_typeCountAggregateInputType | true
  _min?: Game_typeMinAggregateInputType
  _max?: Game_typeMaxAggregateInputType
}

export type Game_typeGroupByOutputType = {
  type: string
  _count: Game_typeCountAggregateOutputType | null
  _min: Game_typeMinAggregateOutputType | null
  _max: Game_typeMaxAggregateOutputType | null
}

type GetGame_typeGroupByPayload<T extends game_typeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Game_typeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Game_typeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Game_typeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Game_typeGroupByOutputType[P]>
      }
    >
  >



export type game_typeWhereInput = {
  AND?: Prisma.game_typeWhereInput | Prisma.game_typeWhereInput[]
  OR?: Prisma.game_typeWhereInput[]
  NOT?: Prisma.game_typeWhereInput | Prisma.game_typeWhereInput[]
  type?: Prisma.StringFilter<"game_type"> | string
  games?: Prisma.GameListRelationFilter
}

export type game_typeOrderByWithRelationInput = {
  type?: Prisma.SortOrder
  games?: Prisma.gameOrderByRelationAggregateInput
  _relevance?: Prisma.game_typeOrderByRelevanceInput
}

export type game_typeWhereUniqueInput = Prisma.AtLeast<{
  type?: string
  AND?: Prisma.game_typeWhereInput | Prisma.game_typeWhereInput[]
  OR?: Prisma.game_typeWhereInput[]
  NOT?: Prisma.game_typeWhereInput | Prisma.game_typeWhereInput[]
  games?: Prisma.GameListRelationFilter
}, "type">

export type game_typeOrderByWithAggregationInput = {
  type?: Prisma.SortOrder
  _count?: Prisma.game_typeCountOrderByAggregateInput
  _max?: Prisma.game_typeMaxOrderByAggregateInput
  _min?: Prisma.game_typeMinOrderByAggregateInput
}

export type game_typeScalarWhereWithAggregatesInput = {
  AND?: Prisma.game_typeScalarWhereWithAggregatesInput | Prisma.game_typeScalarWhereWithAggregatesInput[]
  OR?: Prisma.game_typeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.game_typeScalarWhereWithAggregatesInput | Prisma.game_typeScalarWhereWithAggregatesInput[]
  type?: Prisma.StringWithAggregatesFilter<"game_type"> | string
}

export type game_typeCreateInput = {
  type: string
  games?: Prisma.gameCreateNestedManyWithoutTypeInput
}

export type game_typeUncheckedCreateInput = {
  type: string
  games?: Prisma.gameUncheckedCreateNestedManyWithoutTypeInput
}

export type game_typeUpdateInput = {
  type?: Prisma.StringFieldUpdateOperationsInput | string
  games?: Prisma.gameUpdateManyWithoutTypeNestedInput
}

export type game_typeUncheckedUpdateInput = {
  type?: Prisma.StringFieldUpdateOperationsInput | string
  games?: Prisma.gameUncheckedUpdateManyWithoutTypeNestedInput
}

export type game_typeCreateManyInput = {
  type: string
}

export type game_typeUpdateManyMutationInput = {
  type?: Prisma.StringFieldUpdateOperationsInput | string
}

export type game_typeUncheckedUpdateManyInput = {
  type?: Prisma.StringFieldUpdateOperationsInput | string
}

export type game_typeOrderByRelevanceInput = {
  fields: Prisma.game_typeOrderByRelevanceFieldEnum | Prisma.game_typeOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type game_typeCountOrderByAggregateInput = {
  type?: Prisma.SortOrder
}

export type game_typeMaxOrderByAggregateInput = {
  type?: Prisma.SortOrder
}

export type game_typeMinOrderByAggregateInput = {
  type?: Prisma.SortOrder
}

export type Game_typeScalarRelationFilter = {
  is?: Prisma.game_typeWhereInput
  isNot?: Prisma.game_typeWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type game_typeCreateNestedOneWithoutGamesInput = {
  create?: Prisma.XOR<Prisma.game_typeCreateWithoutGamesInput, Prisma.game_typeUncheckedCreateWithoutGamesInput>
  connectOrCreate?: Prisma.game_typeCreateOrConnectWithoutGamesInput
  connect?: Prisma.game_typeWhereUniqueInput
}

export type game_typeUpdateOneRequiredWithoutGamesNestedInput = {
  create?: Prisma.XOR<Prisma.game_typeCreateWithoutGamesInput, Prisma.game_typeUncheckedCreateWithoutGamesInput>
  connectOrCreate?: Prisma.game_typeCreateOrConnectWithoutGamesInput
  upsert?: Prisma.game_typeUpsertWithoutGamesInput
  connect?: Prisma.game_typeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.game_typeUpdateToOneWithWhereWithoutGamesInput, Prisma.game_typeUpdateWithoutGamesInput>, Prisma.game_typeUncheckedUpdateWithoutGamesInput>
}

export type game_typeCreateWithoutGamesInput = {
  type: string
}

export type game_typeUncheckedCreateWithoutGamesInput = {
  type: string
}

export type game_typeCreateOrConnectWithoutGamesInput = {
  where: Prisma.game_typeWhereUniqueInput
  create: Prisma.XOR<Prisma.game_typeCreateWithoutGamesInput, Prisma.game_typeUncheckedCreateWithoutGamesInput>
}

export type game_typeUpsertWithoutGamesInput = {
  update: Prisma.XOR<Prisma.game_typeUpdateWithoutGamesInput, Prisma.game_typeUncheckedUpdateWithoutGamesInput>
  create: Prisma.XOR<Prisma.game_typeCreateWithoutGamesInput, Prisma.game_typeUncheckedCreateWithoutGamesInput>
  where?: Prisma.game_typeWhereInput
}

export type game_typeUpdateToOneWithWhereWithoutGamesInput = {
  where?: Prisma.game_typeWhereInput
  data: Prisma.XOR<Prisma.game_typeUpdateWithoutGamesInput, Prisma.game_typeUncheckedUpdateWithoutGamesInput>
}

export type game_typeUpdateWithoutGamesInput = {
  type?: Prisma.StringFieldUpdateOperationsInput | string
}

export type game_typeUncheckedUpdateWithoutGamesInput = {
  type?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type Game_typeCountOutputType
 */

export type Game_typeCountOutputType = {
  games: number
}

export type Game_typeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  games?: boolean | Game_typeCountOutputTypeCountGamesArgs
}

/**
 * Game_typeCountOutputType without action
 */
export type Game_typeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game_typeCountOutputType
   */
  select?: Prisma.Game_typeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * Game_typeCountOutputType without action
 */
export type Game_typeCountOutputTypeCountGamesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.gameWhereInput
}


export type game_typeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  type?: boolean
  games?: boolean | Prisma.game_type$gamesArgs<ExtArgs>
  _count?: boolean | Prisma.Game_typeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["game_type"]>



export type game_typeSelectScalar = {
  type?: boolean
}

export type game_typeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"type", ExtArgs["result"]["game_type"]>
export type game_typeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  games?: boolean | Prisma.game_type$gamesArgs<ExtArgs>
  _count?: boolean | Prisma.Game_typeCountOutputTypeDefaultArgs<ExtArgs>
}

export type $game_typePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "game_type"
  objects: {
    games: Prisma.$gamePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    type: string
  }, ExtArgs["result"]["game_type"]>
  composites: {}
}

export type game_typeGetPayload<S extends boolean | null | undefined | game_typeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$game_typePayload, S>

export type game_typeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<game_typeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Game_typeCountAggregateInputType | true
  }

export interface game_typeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['game_type'], meta: { name: 'game_type' } }
  /**
   * Find zero or one Game_type that matches the filter.
   * @param {game_typeFindUniqueArgs} args - Arguments to find a Game_type
   * @example
   * // Get one Game_type
   * const game_type = await prisma.game_type.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends game_typeFindUniqueArgs>(args: Prisma.SelectSubset<T, game_typeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__game_typeClient<runtime.Types.Result.GetResult<Prisma.$game_typePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Game_type that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {game_typeFindUniqueOrThrowArgs} args - Arguments to find a Game_type
   * @example
   * // Get one Game_type
   * const game_type = await prisma.game_type.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends game_typeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, game_typeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__game_typeClient<runtime.Types.Result.GetResult<Prisma.$game_typePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Game_type that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {game_typeFindFirstArgs} args - Arguments to find a Game_type
   * @example
   * // Get one Game_type
   * const game_type = await prisma.game_type.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends game_typeFindFirstArgs>(args?: Prisma.SelectSubset<T, game_typeFindFirstArgs<ExtArgs>>): Prisma.Prisma__game_typeClient<runtime.Types.Result.GetResult<Prisma.$game_typePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Game_type that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {game_typeFindFirstOrThrowArgs} args - Arguments to find a Game_type
   * @example
   * // Get one Game_type
   * const game_type = await prisma.game_type.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends game_typeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, game_typeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__game_typeClient<runtime.Types.Result.GetResult<Prisma.$game_typePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Game_types that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {game_typeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Game_types
   * const game_types = await prisma.game_type.findMany()
   * 
   * // Get first 10 Game_types
   * const game_types = await prisma.game_type.findMany({ take: 10 })
   * 
   * // Only select the `type`
   * const game_typeWithTypeOnly = await prisma.game_type.findMany({ select: { type: true } })
   * 
   */
  findMany<T extends game_typeFindManyArgs>(args?: Prisma.SelectSubset<T, game_typeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$game_typePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Game_type.
   * @param {game_typeCreateArgs} args - Arguments to create a Game_type.
   * @example
   * // Create one Game_type
   * const Game_type = await prisma.game_type.create({
   *   data: {
   *     // ... data to create a Game_type
   *   }
   * })
   * 
   */
  create<T extends game_typeCreateArgs>(args: Prisma.SelectSubset<T, game_typeCreateArgs<ExtArgs>>): Prisma.Prisma__game_typeClient<runtime.Types.Result.GetResult<Prisma.$game_typePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Game_types.
   * @param {game_typeCreateManyArgs} args - Arguments to create many Game_types.
   * @example
   * // Create many Game_types
   * const game_type = await prisma.game_type.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends game_typeCreateManyArgs>(args?: Prisma.SelectSubset<T, game_typeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Game_type.
   * @param {game_typeDeleteArgs} args - Arguments to delete one Game_type.
   * @example
   * // Delete one Game_type
   * const Game_type = await prisma.game_type.delete({
   *   where: {
   *     // ... filter to delete one Game_type
   *   }
   * })
   * 
   */
  delete<T extends game_typeDeleteArgs>(args: Prisma.SelectSubset<T, game_typeDeleteArgs<ExtArgs>>): Prisma.Prisma__game_typeClient<runtime.Types.Result.GetResult<Prisma.$game_typePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Game_type.
   * @param {game_typeUpdateArgs} args - Arguments to update one Game_type.
   * @example
   * // Update one Game_type
   * const game_type = await prisma.game_type.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends game_typeUpdateArgs>(args: Prisma.SelectSubset<T, game_typeUpdateArgs<ExtArgs>>): Prisma.Prisma__game_typeClient<runtime.Types.Result.GetResult<Prisma.$game_typePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Game_types.
   * @param {game_typeDeleteManyArgs} args - Arguments to filter Game_types to delete.
   * @example
   * // Delete a few Game_types
   * const { count } = await prisma.game_type.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends game_typeDeleteManyArgs>(args?: Prisma.SelectSubset<T, game_typeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Game_types.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {game_typeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Game_types
   * const game_type = await prisma.game_type.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends game_typeUpdateManyArgs>(args: Prisma.SelectSubset<T, game_typeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Game_type.
   * @param {game_typeUpsertArgs} args - Arguments to update or create a Game_type.
   * @example
   * // Update or create a Game_type
   * const game_type = await prisma.game_type.upsert({
   *   create: {
   *     // ... data to create a Game_type
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Game_type we want to update
   *   }
   * })
   */
  upsert<T extends game_typeUpsertArgs>(args: Prisma.SelectSubset<T, game_typeUpsertArgs<ExtArgs>>): Prisma.Prisma__game_typeClient<runtime.Types.Result.GetResult<Prisma.$game_typePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Game_types.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {game_typeCountArgs} args - Arguments to filter Game_types to count.
   * @example
   * // Count the number of Game_types
   * const count = await prisma.game_type.count({
   *   where: {
   *     // ... the filter for the Game_types we want to count
   *   }
   * })
  **/
  count<T extends game_typeCountArgs>(
    args?: Prisma.Subset<T, game_typeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Game_typeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Game_type.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Game_typeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Game_typeAggregateArgs>(args: Prisma.Subset<T, Game_typeAggregateArgs>): Prisma.PrismaPromise<GetGame_typeAggregateType<T>>

  /**
   * Group by Game_type.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {game_typeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends game_typeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: game_typeGroupByArgs['orderBy'] }
      : { orderBy?: game_typeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, game_typeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGame_typeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the game_type model
 */
readonly fields: game_typeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for game_type.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__game_typeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  games<T extends Prisma.game_type$gamesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.game_type$gamesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the game_type model
 */
export interface game_typeFieldRefs {
  readonly type: Prisma.FieldRef<"game_type", 'String'>
}
    

// Custom InputTypes
/**
 * game_type findUnique
 */
export type game_typeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game_type
   */
  select?: Prisma.game_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game_type
   */
  omit?: Prisma.game_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.game_typeInclude<ExtArgs> | null
  /**
   * Filter, which game_type to fetch.
   */
  where: Prisma.game_typeWhereUniqueInput
}

/**
 * game_type findUniqueOrThrow
 */
export type game_typeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game_type
   */
  select?: Prisma.game_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game_type
   */
  omit?: Prisma.game_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.game_typeInclude<ExtArgs> | null
  /**
   * Filter, which game_type to fetch.
   */
  where: Prisma.game_typeWhereUniqueInput
}

/**
 * game_type findFirst
 */
export type game_typeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game_type
   */
  select?: Prisma.game_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game_type
   */
  omit?: Prisma.game_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.game_typeInclude<ExtArgs> | null
  /**
   * Filter, which game_type to fetch.
   */
  where?: Prisma.game_typeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of game_types to fetch.
   */
  orderBy?: Prisma.game_typeOrderByWithRelationInput | Prisma.game_typeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for game_types.
   */
  cursor?: Prisma.game_typeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` game_types from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` game_types.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of game_types.
   */
  distinct?: Prisma.Game_typeScalarFieldEnum | Prisma.Game_typeScalarFieldEnum[]
}

/**
 * game_type findFirstOrThrow
 */
export type game_typeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game_type
   */
  select?: Prisma.game_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game_type
   */
  omit?: Prisma.game_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.game_typeInclude<ExtArgs> | null
  /**
   * Filter, which game_type to fetch.
   */
  where?: Prisma.game_typeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of game_types to fetch.
   */
  orderBy?: Prisma.game_typeOrderByWithRelationInput | Prisma.game_typeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for game_types.
   */
  cursor?: Prisma.game_typeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` game_types from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` game_types.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of game_types.
   */
  distinct?: Prisma.Game_typeScalarFieldEnum | Prisma.Game_typeScalarFieldEnum[]
}

/**
 * game_type findMany
 */
export type game_typeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game_type
   */
  select?: Prisma.game_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game_type
   */
  omit?: Prisma.game_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.game_typeInclude<ExtArgs> | null
  /**
   * Filter, which game_types to fetch.
   */
  where?: Prisma.game_typeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of game_types to fetch.
   */
  orderBy?: Prisma.game_typeOrderByWithRelationInput | Prisma.game_typeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing game_types.
   */
  cursor?: Prisma.game_typeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` game_types from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` game_types.
   */
  skip?: number
  distinct?: Prisma.Game_typeScalarFieldEnum | Prisma.Game_typeScalarFieldEnum[]
}

/**
 * game_type create
 */
export type game_typeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game_type
   */
  select?: Prisma.game_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game_type
   */
  omit?: Prisma.game_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.game_typeInclude<ExtArgs> | null
  /**
   * The data needed to create a game_type.
   */
  data: Prisma.XOR<Prisma.game_typeCreateInput, Prisma.game_typeUncheckedCreateInput>
}

/**
 * game_type createMany
 */
export type game_typeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many game_types.
   */
  data: Prisma.game_typeCreateManyInput | Prisma.game_typeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * game_type update
 */
export type game_typeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game_type
   */
  select?: Prisma.game_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game_type
   */
  omit?: Prisma.game_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.game_typeInclude<ExtArgs> | null
  /**
   * The data needed to update a game_type.
   */
  data: Prisma.XOR<Prisma.game_typeUpdateInput, Prisma.game_typeUncheckedUpdateInput>
  /**
   * Choose, which game_type to update.
   */
  where: Prisma.game_typeWhereUniqueInput
}

/**
 * game_type updateMany
 */
export type game_typeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update game_types.
   */
  data: Prisma.XOR<Prisma.game_typeUpdateManyMutationInput, Prisma.game_typeUncheckedUpdateManyInput>
  /**
   * Filter which game_types to update
   */
  where?: Prisma.game_typeWhereInput
  /**
   * Limit how many game_types to update.
   */
  limit?: number
}

/**
 * game_type upsert
 */
export type game_typeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game_type
   */
  select?: Prisma.game_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game_type
   */
  omit?: Prisma.game_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.game_typeInclude<ExtArgs> | null
  /**
   * The filter to search for the game_type to update in case it exists.
   */
  where: Prisma.game_typeWhereUniqueInput
  /**
   * In case the game_type found by the `where` argument doesn't exist, create a new game_type with this data.
   */
  create: Prisma.XOR<Prisma.game_typeCreateInput, Prisma.game_typeUncheckedCreateInput>
  /**
   * In case the game_type was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.game_typeUpdateInput, Prisma.game_typeUncheckedUpdateInput>
}

/**
 * game_type delete
 */
export type game_typeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game_type
   */
  select?: Prisma.game_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game_type
   */
  omit?: Prisma.game_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.game_typeInclude<ExtArgs> | null
  /**
   * Filter which game_type to delete.
   */
  where: Prisma.game_typeWhereUniqueInput
}

/**
 * game_type deleteMany
 */
export type game_typeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which game_types to delete
   */
  where?: Prisma.game_typeWhereInput
  /**
   * Limit how many game_types to delete.
   */
  limit?: number
}

/**
 * game_type.games
 */
export type game_type$gamesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game
   */
  select?: Prisma.gameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game
   */
  omit?: Prisma.gameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gameInclude<ExtArgs> | null
  where?: Prisma.gameWhereInput
  orderBy?: Prisma.gameOrderByWithRelationInput | Prisma.gameOrderByWithRelationInput[]
  cursor?: Prisma.gameWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.GameScalarFieldEnum | Prisma.GameScalarFieldEnum[]
}

/**
 * game_type without action
 */
export type game_typeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the game_type
   */
  select?: Prisma.game_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the game_type
   */
  omit?: Prisma.game_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.game_typeInclude<ExtArgs> | null
}
