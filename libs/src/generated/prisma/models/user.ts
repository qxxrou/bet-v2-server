
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `user` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model user
 * 
 */
export type userModel = runtime.Types.Result.DefaultSelection<Prisma.$userPayload>

export type AggregateUser = {
  _count: UserCountAggregateOutputType | null
  _avg: UserAvgAggregateOutputType | null
  _sum: UserSumAggregateOutputType | null
  _min: UserMinAggregateOutputType | null
  _max: UserMaxAggregateOutputType | null
}

export type UserAvgAggregateOutputType = {
  id: number | null
  up_id: number | null
}

export type UserSumAggregateOutputType = {
  id: number | null
  up_id: number | null
}

export type UserMinAggregateOutputType = {
  id: number | null
  up_id: number | null
  reg_time: Date | null
  log_time: Date | null
  user_name: string | null
  password: string | null
  phone: string | null
  email: string | null
  real_name: string | null
}

export type UserMaxAggregateOutputType = {
  id: number | null
  up_id: number | null
  reg_time: Date | null
  log_time: Date | null
  user_name: string | null
  password: string | null
  phone: string | null
  email: string | null
  real_name: string | null
}

export type UserCountAggregateOutputType = {
  id: number
  up_id: number
  reg_time: number
  log_time: number
  user_name: number
  password: number
  phone: number
  email: number
  real_name: number
  _all: number
}


export type UserAvgAggregateInputType = {
  id?: true
  up_id?: true
}

export type UserSumAggregateInputType = {
  id?: true
  up_id?: true
}

export type UserMinAggregateInputType = {
  id?: true
  up_id?: true
  reg_time?: true
  log_time?: true
  user_name?: true
  password?: true
  phone?: true
  email?: true
  real_name?: true
}

export type UserMaxAggregateInputType = {
  id?: true
  up_id?: true
  reg_time?: true
  log_time?: true
  user_name?: true
  password?: true
  phone?: true
  email?: true
  real_name?: true
}

export type UserCountAggregateInputType = {
  id?: true
  up_id?: true
  reg_time?: true
  log_time?: true
  user_name?: true
  password?: true
  phone?: true
  email?: true
  real_name?: true
  _all?: true
}

export type UserAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which user to aggregate.
   */
  where?: Prisma.userWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of users to fetch.
   */
  orderBy?: Prisma.userOrderByWithRelationInput | Prisma.userOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.userWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned users
  **/
  _count?: true | UserCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UserAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UserSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserMaxAggregateInputType
}

export type GetUserAggregateType<T extends UserAggregateArgs> = {
      [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUser[P]>
    : Prisma.GetScalarType<T[P], AggregateUser[P]>
}




export type userGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.userWhereInput
  orderBy?: Prisma.userOrderByWithAggregationInput | Prisma.userOrderByWithAggregationInput[]
  by: Prisma.UserScalarFieldEnum[] | Prisma.UserScalarFieldEnum
  having?: Prisma.userScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserCountAggregateInputType | true
  _avg?: UserAvgAggregateInputType
  _sum?: UserSumAggregateInputType
  _min?: UserMinAggregateInputType
  _max?: UserMaxAggregateInputType
}

export type UserGroupByOutputType = {
  id: number
  up_id: number
  reg_time: Date
  log_time: Date
  user_name: string
  password: string
  phone: string
  email: string
  real_name: string
  _count: UserCountAggregateOutputType | null
  _avg: UserAvgAggregateOutputType | null
  _sum: UserSumAggregateOutputType | null
  _min: UserMinAggregateOutputType | null
  _max: UserMaxAggregateOutputType | null
}

type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserGroupByOutputType[P]>
      }
    >
  >



export type userWhereInput = {
  AND?: Prisma.userWhereInput | Prisma.userWhereInput[]
  OR?: Prisma.userWhereInput[]
  NOT?: Prisma.userWhereInput | Prisma.userWhereInput[]
  id?: Prisma.IntFilter<"user"> | number
  up_id?: Prisma.IntFilter<"user"> | number
  reg_time?: Prisma.DateTimeFilter<"user"> | Date | string
  log_time?: Prisma.DateTimeFilter<"user"> | Date | string
  user_name?: Prisma.StringFilter<"user"> | string
  password?: Prisma.StringFilter<"user"> | string
  phone?: Prisma.StringFilter<"user"> | string
  email?: Prisma.StringFilter<"user"> | string
  real_name?: Prisma.StringFilter<"user"> | string
}

export type userOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  up_id?: Prisma.SortOrder
  reg_time?: Prisma.SortOrder
  log_time?: Prisma.SortOrder
  user_name?: Prisma.SortOrder
  password?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  real_name?: Prisma.SortOrder
  _relevance?: Prisma.userOrderByRelevanceInput
}

export type userWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  user_name?: string
  phone?: string
  email?: string
  real_name?: string
  AND?: Prisma.userWhereInput | Prisma.userWhereInput[]
  OR?: Prisma.userWhereInput[]
  NOT?: Prisma.userWhereInput | Prisma.userWhereInput[]
  up_id?: Prisma.IntFilter<"user"> | number
  reg_time?: Prisma.DateTimeFilter<"user"> | Date | string
  log_time?: Prisma.DateTimeFilter<"user"> | Date | string
  password?: Prisma.StringFilter<"user"> | string
}, "id" | "id" | "user_name" | "phone" | "email" | "real_name">

export type userOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  up_id?: Prisma.SortOrder
  reg_time?: Prisma.SortOrder
  log_time?: Prisma.SortOrder
  user_name?: Prisma.SortOrder
  password?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  real_name?: Prisma.SortOrder
  _count?: Prisma.userCountOrderByAggregateInput
  _avg?: Prisma.userAvgOrderByAggregateInput
  _max?: Prisma.userMaxOrderByAggregateInput
  _min?: Prisma.userMinOrderByAggregateInput
  _sum?: Prisma.userSumOrderByAggregateInput
}

export type userScalarWhereWithAggregatesInput = {
  AND?: Prisma.userScalarWhereWithAggregatesInput | Prisma.userScalarWhereWithAggregatesInput[]
  OR?: Prisma.userScalarWhereWithAggregatesInput[]
  NOT?: Prisma.userScalarWhereWithAggregatesInput | Prisma.userScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"user"> | number
  up_id?: Prisma.IntWithAggregatesFilter<"user"> | number
  reg_time?: Prisma.DateTimeWithAggregatesFilter<"user"> | Date | string
  log_time?: Prisma.DateTimeWithAggregatesFilter<"user"> | Date | string
  user_name?: Prisma.StringWithAggregatesFilter<"user"> | string
  password?: Prisma.StringWithAggregatesFilter<"user"> | string
  phone?: Prisma.StringWithAggregatesFilter<"user"> | string
  email?: Prisma.StringWithAggregatesFilter<"user"> | string
  real_name?: Prisma.StringWithAggregatesFilter<"user"> | string
}

export type userCreateInput = {
  up_id: number
  reg_time?: Date | string
  log_time?: Date | string
  user_name: string
  password: string
  phone: string
  email: string
  real_name: string
}

export type userUncheckedCreateInput = {
  id?: number
  up_id: number
  reg_time?: Date | string
  log_time?: Date | string
  user_name: string
  password: string
  phone: string
  email: string
  real_name: string
}

export type userUpdateInput = {
  up_id?: Prisma.IntFieldUpdateOperationsInput | number
  reg_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  log_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user_name?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  real_name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type userUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  up_id?: Prisma.IntFieldUpdateOperationsInput | number
  reg_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  log_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user_name?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  real_name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type userCreateManyInput = {
  id?: number
  up_id: number
  reg_time?: Date | string
  log_time?: Date | string
  user_name: string
  password: string
  phone: string
  email: string
  real_name: string
}

export type userUpdateManyMutationInput = {
  up_id?: Prisma.IntFieldUpdateOperationsInput | number
  reg_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  log_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user_name?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  real_name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type userUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  up_id?: Prisma.IntFieldUpdateOperationsInput | number
  reg_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  log_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user_name?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  real_name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type userOrderByRelevanceInput = {
  fields: Prisma.userOrderByRelevanceFieldEnum | Prisma.userOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type userCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  up_id?: Prisma.SortOrder
  reg_time?: Prisma.SortOrder
  log_time?: Prisma.SortOrder
  user_name?: Prisma.SortOrder
  password?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  real_name?: Prisma.SortOrder
}

export type userAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  up_id?: Prisma.SortOrder
}

export type userMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  up_id?: Prisma.SortOrder
  reg_time?: Prisma.SortOrder
  log_time?: Prisma.SortOrder
  user_name?: Prisma.SortOrder
  password?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  real_name?: Prisma.SortOrder
}

export type userMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  up_id?: Prisma.SortOrder
  reg_time?: Prisma.SortOrder
  log_time?: Prisma.SortOrder
  user_name?: Prisma.SortOrder
  password?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  real_name?: Prisma.SortOrder
}

export type userSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  up_id?: Prisma.SortOrder
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}



export type userSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  up_id?: boolean
  reg_time?: boolean
  log_time?: boolean
  user_name?: boolean
  password?: boolean
  phone?: boolean
  email?: boolean
  real_name?: boolean
}, ExtArgs["result"]["user"]>



export type userSelectScalar = {
  id?: boolean
  up_id?: boolean
  reg_time?: boolean
  log_time?: boolean
  user_name?: boolean
  password?: boolean
  phone?: boolean
  email?: boolean
  real_name?: boolean
}

export type userOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "up_id" | "reg_time" | "log_time" | "user_name" | "password" | "phone" | "email" | "real_name", ExtArgs["result"]["user"]>

export type $userPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "user"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    up_id: number
    reg_time: Date
    log_time: Date
    user_name: string
    password: string
    phone: string
    email: string
    real_name: string
  }, ExtArgs["result"]["user"]>
  composites: {}
}

export type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$userPayload, S>

export type userCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<userFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserCountAggregateInputType | true
  }

export interface userDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
  /**
   * Find zero or one User that matches the filter.
   * @param {userFindUniqueArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends userFindUniqueArgs>(args: Prisma.SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma.Prisma__userClient<runtime.Types.Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one User that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__userClient<runtime.Types.Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first User that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {userFindFirstArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends userFindFirstArgs>(args?: Prisma.SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma.Prisma__userClient<runtime.Types.Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first User that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__userClient<runtime.Types.Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Users that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.user.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.user.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends userFindManyArgs>(args?: Prisma.SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a User.
   * @param {userCreateArgs} args - Arguments to create a User.
   * @example
   * // Create one User
   * const User = await prisma.user.create({
   *   data: {
   *     // ... data to create a User
   *   }
   * })
   * 
   */
  create<T extends userCreateArgs>(args: Prisma.SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma.Prisma__userClient<runtime.Types.Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Users.
   * @param {userCreateManyArgs} args - Arguments to create many Users.
   * @example
   * // Create many Users
   * const user = await prisma.user.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends userCreateManyArgs>(args?: Prisma.SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a User.
   * @param {userDeleteArgs} args - Arguments to delete one User.
   * @example
   * // Delete one User
   * const User = await prisma.user.delete({
   *   where: {
   *     // ... filter to delete one User
   *   }
   * })
   * 
   */
  delete<T extends userDeleteArgs>(args: Prisma.SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma.Prisma__userClient<runtime.Types.Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one User.
   * @param {userUpdateArgs} args - Arguments to update one User.
   * @example
   * // Update one User
   * const user = await prisma.user.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends userUpdateArgs>(args: Prisma.SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma.Prisma__userClient<runtime.Types.Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Users.
   * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.user.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends userDeleteManyArgs>(args?: Prisma.SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Users.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends userUpdateManyArgs>(args: Prisma.SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one User.
   * @param {userUpsertArgs} args - Arguments to update or create a User.
   * @example
   * // Update or create a User
   * const user = await prisma.user.upsert({
   *   create: {
   *     // ... data to create a User
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the User we want to update
   *   }
   * })
   */
  upsert<T extends userUpsertArgs>(args: Prisma.SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma.Prisma__userClient<runtime.Types.Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Users.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {userCountArgs} args - Arguments to filter Users to count.
   * @example
   * // Count the number of Users
   * const count = await prisma.user.count({
   *   where: {
   *     // ... the filter for the Users we want to count
   *   }
   * })
  **/
  count<T extends userCountArgs>(
    args?: Prisma.Subset<T, userCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a User.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserAggregateArgs>(args: Prisma.Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

  /**
   * Group by User.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {userGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends userGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: userGroupByArgs['orderBy'] }
      : { orderBy?: userGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the user model
 */
readonly fields: userFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for user.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__userClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the user model
 */
export interface userFieldRefs {
  readonly id: Prisma.FieldRef<"user", 'Int'>
  readonly up_id: Prisma.FieldRef<"user", 'Int'>
  readonly reg_time: Prisma.FieldRef<"user", 'DateTime'>
  readonly log_time: Prisma.FieldRef<"user", 'DateTime'>
  readonly user_name: Prisma.FieldRef<"user", 'String'>
  readonly password: Prisma.FieldRef<"user", 'String'>
  readonly phone: Prisma.FieldRef<"user", 'String'>
  readonly email: Prisma.FieldRef<"user", 'String'>
  readonly real_name: Prisma.FieldRef<"user", 'String'>
}
    

// Custom InputTypes
/**
 * user findUnique
 */
export type userFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the user
   */
  select?: Prisma.userSelect<ExtArgs> | null
  /**
   * Omit specific fields from the user
   */
  omit?: Prisma.userOmit<ExtArgs> | null
  /**
   * Filter, which user to fetch.
   */
  where: Prisma.userWhereUniqueInput
}

/**
 * user findUniqueOrThrow
 */
export type userFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the user
   */
  select?: Prisma.userSelect<ExtArgs> | null
  /**
   * Omit specific fields from the user
   */
  omit?: Prisma.userOmit<ExtArgs> | null
  /**
   * Filter, which user to fetch.
   */
  where: Prisma.userWhereUniqueInput
}

/**
 * user findFirst
 */
export type userFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the user
   */
  select?: Prisma.userSelect<ExtArgs> | null
  /**
   * Omit specific fields from the user
   */
  omit?: Prisma.userOmit<ExtArgs> | null
  /**
   * Filter, which user to fetch.
   */
  where?: Prisma.userWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of users to fetch.
   */
  orderBy?: Prisma.userOrderByWithRelationInput | Prisma.userOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for users.
   */
  cursor?: Prisma.userWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of users.
   */
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * user findFirstOrThrow
 */
export type userFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the user
   */
  select?: Prisma.userSelect<ExtArgs> | null
  /**
   * Omit specific fields from the user
   */
  omit?: Prisma.userOmit<ExtArgs> | null
  /**
   * Filter, which user to fetch.
   */
  where?: Prisma.userWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of users to fetch.
   */
  orderBy?: Prisma.userOrderByWithRelationInput | Prisma.userOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for users.
   */
  cursor?: Prisma.userWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of users.
   */
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * user findMany
 */
export type userFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the user
   */
  select?: Prisma.userSelect<ExtArgs> | null
  /**
   * Omit specific fields from the user
   */
  omit?: Prisma.userOmit<ExtArgs> | null
  /**
   * Filter, which users to fetch.
   */
  where?: Prisma.userWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of users to fetch.
   */
  orderBy?: Prisma.userOrderByWithRelationInput | Prisma.userOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing users.
   */
  cursor?: Prisma.userWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` users.
   */
  skip?: number
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * user create
 */
export type userCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the user
   */
  select?: Prisma.userSelect<ExtArgs> | null
  /**
   * Omit specific fields from the user
   */
  omit?: Prisma.userOmit<ExtArgs> | null
  /**
   * The data needed to create a user.
   */
  data: Prisma.XOR<Prisma.userCreateInput, Prisma.userUncheckedCreateInput>
}

/**
 * user createMany
 */
export type userCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many users.
   */
  data: Prisma.userCreateManyInput | Prisma.userCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * user update
 */
export type userUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the user
   */
  select?: Prisma.userSelect<ExtArgs> | null
  /**
   * Omit specific fields from the user
   */
  omit?: Prisma.userOmit<ExtArgs> | null
  /**
   * The data needed to update a user.
   */
  data: Prisma.XOR<Prisma.userUpdateInput, Prisma.userUncheckedUpdateInput>
  /**
   * Choose, which user to update.
   */
  where: Prisma.userWhereUniqueInput
}

/**
 * user updateMany
 */
export type userUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update users.
   */
  data: Prisma.XOR<Prisma.userUpdateManyMutationInput, Prisma.userUncheckedUpdateManyInput>
  /**
   * Filter which users to update
   */
  where?: Prisma.userWhereInput
  /**
   * Limit how many users to update.
   */
  limit?: number
}

/**
 * user upsert
 */
export type userUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the user
   */
  select?: Prisma.userSelect<ExtArgs> | null
  /**
   * Omit specific fields from the user
   */
  omit?: Prisma.userOmit<ExtArgs> | null
  /**
   * The filter to search for the user to update in case it exists.
   */
  where: Prisma.userWhereUniqueInput
  /**
   * In case the user found by the `where` argument doesn't exist, create a new user with this data.
   */
  create: Prisma.XOR<Prisma.userCreateInput, Prisma.userUncheckedCreateInput>
  /**
   * In case the user was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.userUpdateInput, Prisma.userUncheckedUpdateInput>
}

/**
 * user delete
 */
export type userDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the user
   */
  select?: Prisma.userSelect<ExtArgs> | null
  /**
   * Omit specific fields from the user
   */
  omit?: Prisma.userOmit<ExtArgs> | null
  /**
   * Filter which user to delete.
   */
  where: Prisma.userWhereUniqueInput
}

/**
 * user deleteMany
 */
export type userDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which users to delete
   */
  where?: Prisma.userWhereInput
  /**
   * Limit how many users to delete.
   */
  limit?: number
}

/**
 * user without action
 */
export type userDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the user
   */
  select?: Prisma.userSelect<ExtArgs> | null
  /**
   * Omit specific fields from the user
   */
  omit?: Prisma.userOmit<ExtArgs> | null
}
